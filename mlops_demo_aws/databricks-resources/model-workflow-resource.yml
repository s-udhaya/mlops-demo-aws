#new_cluster: &new_cluster
#  new_cluster:
#    num_workers: 3
#    spark_version: 12.2.x-cpu-ml-scala2.12
#    node_type_id: i3.xlarge
#    custom_tags:
#      clusterSource: mlops-stack/0.1

model_workflow_cluster: &model_workflow_cluster
  new_cluster:
    num_workers: 1
    spark_version: 13.0.x-cpu-ml-scala2.12
    instance_pool_id: '0605-090612-polo106-pool-l0jj3imi'
    custom_tags:
      clusterSource: mlops-stack/0.1

permissions: &permissions
  permissions:
    - level: CAN_VIEW
      group_name: users

resources:
  jobs:
    model_training_job:
      name: ${bundle.environment}-mlops-demo-aws-model-training-job
      job_clusters:
        - job_cluster_key: model_training_job_cluster
          <<: *model_workflow_cluster
      tasks:
        - task_key: Train
          job_cluster_key: model_training_job_cluster
          notebook_task:
            notebook_path: mlops_demo_aws/training/notebooks/Train
            source: git
            base_parameters:
              env: ${bundle.environment}
              experiment_name: ${var.experiment_name}
              model_name: ${var.model_name}
              # git source information of current ML resource deployment. It will be persisted as part of the workflow run
              git_source_info: url:${bundle.git.origin_url}; branch:${bundle.git.branch}; commit:${bundle.git.commit}
        - task_key: ModelValidation
          job_cluster_key: model_training_job_cluster
          depends_on:
            - task_key: Train
          notebook_task:
            notebook_path: mlops_demo_aws/validation/notebooks/ModelValidation
            source: git
            base_parameters:
              env: ${bundle.environment}
              experiment_name: ${var.experiment_name}
              model_name: ${var.model_name}
              # The `run_mode` defines whether model validation is enabled or not.
              # It can be one of the three values:
              # `disabled` : Do not run the model validation notebook.
              # `dry_run`  : Run the model validation notebook. Ignore failed model validation rules and proceed to move
              #               model to Production stage.
              # `enabled`  : Run the model validation notebook. Move model to Production stage only if all model validation
              #               rules are passing.
              # TODO: update run_mode
              run_mode: dry_run
              # Whether to load the current registered "Production" stage model as baseline.
              # Baseline model is a requirement for relative change and absolute change validation thresholds.
              # TODO: update enable_baseline_comparison
              enable_baseline_comparison: "false"
              # Please refer to data parameter in mlflow.evaluate documentation https://mlflow.org/docs/latest/python_api/mlflow.html#mlflow.evaluate
              # TODO: update validation_input
              validation_input: SELECT * FROM delta.`dbfs:/databricks-datasets/nyctaxi-with-zipcodes/subsampled`
              # Specifies the name of the function in mlops-demo-aws/training_validation_deployment/validation/validation.py that returns custom metrics.
              # TODO(optional): custom_metrics_loader_function
              custom_metrics_loader_function: custom_metrics
              # Specifies the name of the function in mlops-demo-aws/training_validation_deployment/validation/validation.py that returns model validation thresholds.
              # TODO(optional): validation_thresholds_loader_function
              validation_thresholds_loader_function: validation_thresholds
              # Specifies the name of the function in mlops-demo-aws/training_validation_deployment/validation/validation.py that returns evaluator_config.
              # TODO(optional): evaluator_config_loader_function
              evaluator_config_loader_function: evaluator_config
              # git source information of current ML resource deployment. It will be persisted as part of the workflow run
              git_source_info: url:${bundle.git.origin_url}; branch:${bundle.git.branch}; commit:${bundle.git.commit}
        - task_key: ModelDeployment
          job_cluster_key: model_training_job_cluster
          depends_on:
            - task_key: ModelValidation
          notebook_task:
            notebook_path: mlops_demo_aws/deployment/model_deployment/notebooks/ModelDeployment
            source: git
            base_parameters:
              env: ${bundle.environment}
              # git source information of current ML resource deployment. It will be persisted as part of the workflow run
              git_source_info: url:${bundle.git.origin_url}; branch:${bundle.git.branch}; commit:${bundle.git.commit}
        - task_key: ModelServing
          job_cluster_key: model_training_job_cluster
          depends_on:
            - task_key: ModelDeployment
          notebook_task:
            notebook_path: mlops_demo_aws/deployment/model_serving/notebooks/ModelServing
            source: git
            base_parameters:
              env: ${bundle.environment}
              # git source information of current ML resource deployment. It will be persisted as part of the workflow run
              git_source_info: url:${bundle.git.origin_url}; branch:${bundle.git.branch}; commit:${bundle.git.commit}
      git_source:
        git_provider: "gitHub"
        git_url: "https://github.com/s-udhaya/mlops-demo-aws.git"
        git_commit: ${bundle.git.commit}

      schedule:
        quartz_cron_expression: "0 0 9 * * ?" # daily at 9am
        timezone_id: UTC
      <<: *permissions
      # If you want to turn on notifications for this job, please uncomment the below code,
      # and provide a list of emails to the on_failure argument.
      #
      #  email_notifications:
      #    on_failure:
      #      - first@company.com
      #      - second@company.com
